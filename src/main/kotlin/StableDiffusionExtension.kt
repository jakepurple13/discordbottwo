@file:Suppress("INLINE_FROM_HIGHER_PLATFORM")

import com.kotlindiscord.kord.extensions.commands.Arguments
import com.kotlindiscord.kord.extensions.commands.application.slash.converters.impl.optionalStringChoice
import com.kotlindiscord.kord.extensions.commands.converters.impl.optionalString
import com.kotlindiscord.kord.extensions.commands.converters.impl.string
import com.kotlindiscord.kord.extensions.extensions.Extension
import com.kotlindiscord.kord.extensions.extensions.publicSlashCommand
import com.kotlindiscord.kord.extensions.types.respond
import dev.kord.core.behavior.interaction.followup.edit
import io.ktor.client.request.forms.*

class StableDiffusionExtension(
    private val network: Network
) : Extension() {
    override val name: String = "stablediffusion"

    override suspend fun setup() {
        val argOptions = network.stableDiffusionModels().getOrNull()
        println(argOptions)
        publicSlashCommand(arguments = { DiffusionArgs(argOptions) }) {
            name = "stablediffusion"
            description = "Get a ai generated image"

            action {
                respond { content = "Please wait while I generate an image..." }
                    .edit {
                        network.stableDiffusion(
                            prompt = arguments.prompt,
                            modelName = arguments.model,
                            negativePrompt = arguments.negativePrompt.orEmpty()
                        )
                            .onSuccess { model ->
                                content = """
                                    Here is your neko image!
                                    
                                    - Prompt: `${arguments.prompt}`
                                    - Negative Prompt: `${arguments.negativePrompt.orEmpty()}`
                                    - With model: `${arguments.model ?: "7th_anime_v3_C.ckpt [6fe2f683b9]"}`
                                    
                                    Generated by Stable Diffusion
                                """.trimIndent()
                                addFile(
                                    "output.png",
                                    ChannelProvider { model.byteReadChannel }
                                )
                            }
                            .respondWithError()
                    }
            }
        }
    }

    inner class DiffusionArgs(options: List<StableDiffusionModel>?) : Arguments() {
        val prompt by string {
            name = "prompt"
            description = "Give me a prompt!"
        }

        val model by optionalStringChoice {
            name = "modeltype"
            description = "If you don't want to use the default model, you can change it!"
            options?.forEach {
                choice(it.title, it.title)
            }
        }

        val negativePrompt by optionalString {
            name = "negativeprompt"
            description = "If you want to include things NOT to add"
        }
    }
}