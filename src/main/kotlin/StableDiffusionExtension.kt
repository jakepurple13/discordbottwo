@file:Suppress("INLINE_FROM_HIGHER_PLATFORM")

import com.kotlindiscord.kord.extensions.commands.Arguments
import com.kotlindiscord.kord.extensions.commands.application.slash.converters.impl.optionalStringChoice
import com.kotlindiscord.kord.extensions.commands.converters.impl.defaultingDecimal
import com.kotlindiscord.kord.extensions.commands.converters.impl.defaultingInt
import com.kotlindiscord.kord.extensions.commands.converters.impl.optionalString
import com.kotlindiscord.kord.extensions.commands.converters.impl.string
import com.kotlindiscord.kord.extensions.extensions.Extension
import com.kotlindiscord.kord.extensions.extensions.publicSlashCommand
import com.kotlindiscord.kord.extensions.types.respond
import dev.kord.core.behavior.interaction.followup.edit
import dev.kord.rest.builder.message.modify.embed
import io.ktor.client.request.forms.*

class StableDiffusionExtension(
    private val network: Network
) : Extension() {
    override val name: String = "stablediffusion"

    override suspend fun setup() {
        val argOptions = network.stableDiffusionModels().getOrNull()
        println(argOptions)
        val argSamplers = network.stableDiffusionSamplers().getOrNull()
        println(argSamplers)
        publicSlashCommand(arguments = { DiffusionArgs(argOptions, argSamplers) }) {
            name = "stablediffusion"
            description = "Get a ai generated image"

            action {
                respond { content = "Please wait while I generate an image..." }
                    .edit {
                        network.retrieveStableDiffusion(
                            prompt = arguments.prompt,
                            modelName = arguments.model,
                            negativePrompt = arguments.negativePrompt.orEmpty(),
                            cfgScale = arguments.cfgScale,
                            steps = arguments.steps,
                            sampler = arguments.sampler
                        )
                            .onSuccess { model ->
                                content = "${member?.mention} your image is ready!"
                                embed {
                                    title = "Here is your neko image!"
                                    field("Prompt") { model.parameters.prompt }
                                    model.parameters.negativePrompt?.let { field("Negative Prompt") { it } }
                                    field("Model") { arguments.model ?: "7th_anime_v3_C.ckpt [6fe2f683b9]" }
                                    field("Cfg Scale") { model.parameters.cfgScale.toString() }
                                    field("Steps") { model.parameters.steps.toString() }
                                    field("Sampling Method") {
                                        model.parameters.samplerName ?: model.parameters.samplerIndex
                                    }
                                    footer { text = "Generated by Stable Diffusion" }
                                }

                                model.imagesAsByteChannel().forEach {
                                    addFile("output.png", ChannelProvider { it })
                                }
                            }
                            .respondWithError()
                    }
            }
        }
    }

    inner class DiffusionArgs(
        options: List<StableDiffusionModel>?,
        samplers: List<StableDiffusionSamplers>?
    ) : Arguments() {
        val prompt by string {
            name = "prompt"
            description = "Give me a prompt!"
        }

        val model by optionalStringChoice {
            name = "modeltype"
            description = "If you don't want to use the default model, you can change it!"
            options?.forEach {
                choice(it.title, it.title)
            }
        }

        val negativePrompt by optionalString {
            name = "negativeprompt"
            description = "If you want to include things NOT to add"
        }

        val cfgScale by defaultingDecimal {
            name = "cfgscale"
            description = "Classifier Free Guidance Scale - how strongly the image should conform to prompt"
            defaultValue = 7.0
            minValue = 1.0
            maxValue = 30.0
        }

        val steps by defaultingInt {
            name = "steps"
            description = "How many times to improve the generated image iteratively"
            defaultValue = 20
            minValue = 1
            maxValue = 150
        }

        val sampler by optionalStringChoice {
            name = "sampler"
            description = "Which sampling method to use"
            samplers?.forEach {
                choice(it.name, it.name)
            }
        }
    }
}